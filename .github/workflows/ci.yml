name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop --config .rubocop.yml -f github --debug

  test:
    runs-on: ubuntu-latest
    env:
      COVERAGE: 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev

      - name: Set up environment
        run: |
          echo "RAILS_ENV=test" >> $GITHUB_ENV
          if [ ! -f config/database.yml ]; then
            echo -e "test:\n  adapter: sqlite3\n  database: db/test.sqlite3\n  pool: 5\n  timeout: 5000" > config/database.yml
          fi

      - name: Install gems
        run: bundle install

      - name: Set up database
        run: |
          bundle exec rails db:create
          bundle exec rails db:migrate

      - name: Run tests with coverage
        run: |
          bundle exec rspec --format progress --force-color --out rspec_results.log || (cat rspec_results.log; exit 1)
          if [ ! -f coverage/coverage.json ]; then
            echo "❌ coverage.json not found"
            exit 1
          fi

      - name: Upload RSpec logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: rspec-logs
          path: rspec_results.log
          if-no-files-found: ignore
          retention-days: 1

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: coverage/
          if-no-files-found: error
          retention-days: 1

  coverage_check:
    runs-on: ubuntu-latest
    needs: test
    env:
      MIN_COVERAGE: 80

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Install gems
        run: bundle install

      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        with:
          name: coverage-data
          path: coverage/

      - name: Check coverage threshold
        run: |
          if [ ! -f coverage/coverage.json ]; then
            echo "❌ coverage.json not found"
            exit 1
          fi
          COVERAGE=$(ruby -rjson -e "
            begin
              data = JSON.parse(File.read('coverage/coverage.json'));
              percent = data.dig('metrics', 'covered_percent') || 0.0;
              puts percent.to_f.round(2);
            rescue => e
              puts '0.0'
              STDERR.puts 'Error parsing coverage: ' + e.message
              exit 1
            end
          ")

          echo "Coverage: $COVERAGE%"
          echo "Required: $MIN_COVERAGE%"

          if (( $(echo "$COVERAGE < $MIN_COVERAGE" | bc -l) )); then
            echo "❌ Coverage $COVERAGE% is below the required $MIN_COVERAGE%"
            exit 1
          else
            echo "✅ Coverage $COVERAGE% meets the required $MIN_COVERAGE%"
          fi
